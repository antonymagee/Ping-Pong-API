{
  "swagger" : "2.0",
  "info" : {
    "version" : "0.1",
    "title" : "Anow Ping Pong Api",
    "description" : "https://bitbucket.org/antony_magee/anow-ping-pong-api-antony",
    "termsOfService" : "terms",
    "contact" : {
      "name" : "Antony Magee",
      "email" : "antony.magee@gmail.com"
    },
    "license" : {
      "name" : "MIT",
      "url" : "http://opensource.org/licenses/MIT"
    }
  },
  "schemes" : [ "http" ],
  "host" : "localhost:54349",
  "basePath" : "/api/",
  "paths" : {
    "/games" : {
      "get" : {
        "summary" : "Gets all games",
        "description" : "Returns a list of all played games - Ordered by Newest.",
        "responses" : {
          "200" : {
            "description" : "A list of all played games",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Game"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Adds new game to list",
        "description" : "Adds all the information for a new game",
        "responses" : {
          "200" : {
            "description" : "Displays the item that was just added with all calculated fields"
          },
          "400" : {
            "description" : "Handled by ModelState.isValid"
          }
        },
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user to create.",
          "schema" : {
            "type" : "object",
            "properties" : {
              "" : {
                "$ref" : "#/definitions/GamePost"
              }
            }
          }
        } ]
      }
    },
    "/games/{id}" : {
      "put" : {
        "summary" : "Updates game by Id",
        "description" : "Updates the supplied values for a specific game by Id",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "description" : "The games Id",
          "type" : "integer"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The user to update.",
          "schema" : {
            "type" : "object",
            "properties" : {
              "" : {
                "$ref" : "#/definitions/GamePost"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Game is updates"
          },
          "400" : {
            "description" : "Handled by ModelState.isValid"
          }
        }
      },
      "get" : {
        "summary" : "Get game by Id",
        "description" : "Returns the game that matches the passed Id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "description" : "The games Id",
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all played games",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Game"
              }
            }
          },
          "404" : {
            "description" : "Id does not exist"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes game by Id",
        "description" : "Deletes the game that matches the passed Id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "description" : "The games Id",
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The game is deleted"
          },
          "404" : {
            "description" : "Wrong Id or Id does not exist"
          }
        }
      }
    },
    "/games/ByUser/{name}" : {
      "get" : {
        "summary" : "Get games played by Player",
        "description" : "Returns a list of all played games by the supplied Player Name - Ordered by Newest.",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "description" : "The users name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the specific User",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Game"
              }
            }
          },
          "400" : {
            "description" : "User not found."
          }
        }
      }
    }
  },
  "definitions" : {
    "Game" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "long"
        },
        "Player1" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Antony"
        },
        "Player2" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Dena"
        },
        "Player3" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Dave"
        },
        "Player4" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Greg"
        },
        "Time" : {
          "type" : "string",
          "format" : "date"
        },
        "Score1" : {
          "type" : "integer",
          "example" : 22
        },
        "Score2" : {
          "type" : "integer",
          "example" : 20
        },
        "Winner" : {
          "type" : "string"
        }
      }
    },
    "GamePost" : {
      "type" : "object",
      "properties" : {
        "Player1" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Antony"
        },
        "Player2" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Dena"
        },
        "Player3" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Dave"
        },
        "Player4" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 25,
          "example" : "Greg"
        },
        "Score1" : {
          "type" : "integer",
          "example" : 22
        },
        "Score2" : {
          "type" : "integer",
          "example" : 20
        }
      }
    }
  }
}